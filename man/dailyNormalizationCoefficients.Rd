% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/geo_utilities.R
\name{dailyNormalizationCoefficients}
\alias{dailyNormalizationCoefficients}
\title{Creates a matrix of daily coefficients for given points on the territory,}
\usage{
dailyNormalizationCoefficients(
  input_places,
  start_date,
  end_date,
  id_column_name = "id_poi",
  lon_column_name = "lon",
  lat_column_name = "lat",
  radius_mt = 25000,
  normalization_percentage = 0.14,
  country = "Italy"
)
}
\arguments{
\item{input_places}{a data.frame containing for each POI a unique id, longitude and latitude}

\item{start_date}{starting date of the coefficient}

\item{end_date}{ending date of the coefficient}

\item{id_column_name}{the name of the column containing the POI unique id (default id_poi)}

\item{lon_column_name}{the name of the column containing the POI longitudee (default lon)}

\item{lat_column_name}{the name of the column containing the POI latitude (default lat)}

\item{radius_mt}{the radius in meters around the POI over which to compute the normalization (default 25000 mt)}

\item{normalization_percentage}{The simulated penetration rate. Default 0.14 or 14 percent. Set to 1 to attempt an estimate of population parameter but will have huge variance.}

\item{country}{Defaults to Italy, other countries are not implemented yet}
}
\value{
Returns a pivot data.frame that contains, for each POI and date, the multiplication coefficient
}
\description{
The returned multiplier can be used for each analysed point and each day to simulate a common
population penetration rate across all points. The rate is given by the normalization_percentage.
parameter and it defaults to 0.14, aka 14 percent.
NB: this queries Athena and considers the statistics.panel table on AWS Glue being updated daily by a cronjob.
}
\examples{
library(alexr)
library(data.table)
places <- athena_execute_fetch('SELECT * from places.places where ds = (select max(ds) from places.places) limit 5')
places$ds <- NULL
input_places <- places \%>\% select(area_id, everything())
dailyNormalizationCoefficients(input_places, as.Date('2020-01-20),as.Date('2020-01-20), id_column_name = 'area_id')
fwrite(input_places,'input_places.csv')
fwrite(poi_normalization_coefficient_wide, 'poi_normalization_coefficient_wide.csv')

}
